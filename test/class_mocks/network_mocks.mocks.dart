// Mocks generated by Mockito 5.0.5 from annotations
// in crypto_pricing/test/class_mocks/network_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:crypto_pricing/core/network/network_info.dart' as _i3;
import 'package:crypto_pricing/core/network/network_manager.dart' as _i6;
import 'package:http/src/client.dart' as _i2;
import 'package:http/src/response.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeClient extends _i1.Fake implements _i2.Client {}

class _FakeNetworkInfo extends _i1.Fake implements _i3.NetworkInfo {}

class _FakeResponse extends _i1.Fake implements _i4.Response {}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i3.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}

/// A class which mocks [NetworkManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkManager extends _i1.Mock implements _i6.NetworkManager {
  MockNetworkManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeClient()) as _i2.Client);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  _i3.NetworkInfo get networkInfo =>
      (super.noSuchMethod(Invocation.getter(#networkInfo),
          returnValue: _FakeNetworkInfo()) as _i3.NetworkInfo);
  @override
  _i5.Future<_i4.Response> apiGet(String? url) =>
      (super.noSuchMethod(Invocation.method(#apiGet, [url]),
              returnValue: Future<_i4.Response>.value(_FakeResponse()))
          as _i5.Future<_i4.Response>);
}
